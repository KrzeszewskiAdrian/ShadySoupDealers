// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * A table of pollution effects
 * The pollution effect at a location is (global pollution + all additive effects) * all multiplicative effects
 */
public final class PollutionEffect extends Table {
  public static PollutionEffect getRootAsPollutionEffect(ByteBuffer _bb) { return getRootAsPollutionEffect(_bb, new PollutionEffect()); }
  public static PollutionEffect getRootAsPollutionEffect(ByteBuffer _bb, PollutionEffect obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public PollutionEffect __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  /**
   * The origin and radius of the circle defining the pollution effect.
   */
  public Vec location() { return location(new Vec()); }
  public Vec location(Vec obj) { int o = __offset(4); return o != 0 ? obj.__init(o + bb_pos, bb) : null; }
  public int radiusSquared() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The additive amount of the pollution effect.
   */
  public int additiveEffect() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The multiplicative coefficient.
   */
  public float multiplicativeEffect() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static void startPollutionEffect(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addLocation(FlatBufferBuilder builder, int locationOffset) { builder.addStruct(0, locationOffset, 0); }
  public static void addRadiusSquared(FlatBufferBuilder builder, int radiusSquared) { builder.addInt(1, radiusSquared, 0); }
  public static void addAdditiveEffect(FlatBufferBuilder builder, int additiveEffect) { builder.addInt(2, additiveEffect, 0); }
  public static void addMultiplicativeEffect(FlatBufferBuilder builder, float multiplicativeEffect) { builder.addFloat(3, multiplicativeEffect, 0.0f); }
  public static int endPollutionEffect(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

